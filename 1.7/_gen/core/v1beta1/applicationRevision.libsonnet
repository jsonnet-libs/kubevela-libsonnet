{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='applicationRevision', url='', help='"ApplicationRevision is the Schema for the ApplicationRevision API"'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of ApplicationRevision', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'ApplicationRevision',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"ApplicationRevisionSpec is the spec of ApplicationRevision"'),
  spec: {
    '#application':: d.obj(help='"Application records the snapshot of the created/modified Application"'),
    application: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { application+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { application+: { metadata+: { annotations+: annotations } } } },
        '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizers(finalizers): { spec+: { application+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizersMixin(finalizers): { spec+: { application+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { application+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { application+: { metadata+: { labels+: labels } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { application+: { metadata+: { name: name } } } },
        '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { application+: { metadata+: { namespace: namespace } } } },
      },
      '#spec':: d.obj(help='"ApplicationSpec is the spec of Application"'),
      spec: {
        '#components':: d.obj(help=''),
        components: {
          '#inputs':: d.obj(help='"StepInputs defines variable input of WorkflowStep"'),
          inputs: {
            '#withFrom':: d.fn(help='', args=[d.arg(name='from', type=d.T.string)]),
            withFrom(from): { from: from },
            '#withParameterKey':: d.fn(help='', args=[d.arg(name='parameterKey', type=d.T.string)]),
            withParameterKey(parameterKey): { parameterKey: parameterKey },
          },
          '#outputs':: d.obj(help='"StepOutputs defines output variable of WorkflowStep"'),
          outputs: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValueFrom':: d.fn(help='', args=[d.arg(name='valueFrom', type=d.T.string)]),
            withValueFrom(valueFrom): { valueFrom: valueFrom },
          },
          '#traits':: d.obj(help='"Traits define the trait of one component, the type must be array to keep the order."'),
          traits: {
            '#withProperties':: d.fn(help='', args=[d.arg(name='properties', type=d.T.object)]),
            withProperties(properties): { properties: properties },
            '#withPropertiesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
            withPropertiesMixin(properties): { properties+: properties },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withDependsOn':: d.fn(help='', args=[d.arg(name='dependsOn', type=d.T.array)]),
          withDependsOn(dependsOn): { dependsOn: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
          '#withDependsOnMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dependsOn', type=d.T.array)]),
          withDependsOnMixin(dependsOn): { dependsOn+: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
          '#withExternalRevision':: d.fn(help='"ExternalRevision specified the component revisionName"', args=[d.arg(name='externalRevision', type=d.T.string)]),
          withExternalRevision(externalRevision): { externalRevision: externalRevision },
          '#withInputs':: d.fn(help='"StepInputs defines variable input of WorkflowStep"', args=[d.arg(name='inputs', type=d.T.array)]),
          withInputs(inputs): { inputs: if std.isArray(v=inputs) then inputs else [inputs] },
          '#withInputsMixin':: d.fn(help='"StepInputs defines variable input of WorkflowStep"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='inputs', type=d.T.array)]),
          withInputsMixin(inputs): { inputs+: if std.isArray(v=inputs) then inputs else [inputs] },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withOutputs':: d.fn(help='"StepOutputs defines output variable of WorkflowStep"', args=[d.arg(name='outputs', type=d.T.array)]),
          withOutputs(outputs): { outputs: if std.isArray(v=outputs) then outputs else [outputs] },
          '#withOutputsMixin':: d.fn(help='"StepOutputs defines output variable of WorkflowStep"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputs', type=d.T.array)]),
          withOutputsMixin(outputs): { outputs+: if std.isArray(v=outputs) then outputs else [outputs] },
          '#withProperties':: d.fn(help='', args=[d.arg(name='properties', type=d.T.object)]),
          withProperties(properties): { properties: properties },
          '#withPropertiesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
          withPropertiesMixin(properties): { properties+: properties },
          '#withScopes':: d.fn(help='"scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance."', args=[d.arg(name='scopes', type=d.T.object)]),
          withScopes(scopes): { scopes: scopes },
          '#withScopesMixin':: d.fn(help='"scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.object)]),
          withScopesMixin(scopes): { scopes+: scopes },
          '#withTraits':: d.fn(help='"Traits define the trait of one component, the type must be array to keep the order."', args=[d.arg(name='traits', type=d.T.array)]),
          withTraits(traits): { traits: if std.isArray(v=traits) then traits else [traits] },
          '#withTraitsMixin':: d.fn(help='"Traits define the trait of one component, the type must be array to keep the order."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='traits', type=d.T.array)]),
          withTraitsMixin(traits): { traits+: if std.isArray(v=traits) then traits else [traits] },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#policies':: d.obj(help='"Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed."'),
        policies: {
          '#withName':: d.fn(help='"Name is the unique name of the policy."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProperties':: d.fn(help='', args=[d.arg(name='properties', type=d.T.object)]),
          withProperties(properties): { properties: properties },
          '#withPropertiesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
          withPropertiesMixin(properties): { properties+: properties },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#withComponents':: d.fn(help='', args=[d.arg(name='components', type=d.T.array)]),
        withComponents(components): { spec+: { application+: { spec+: { components: if std.isArray(v=components) then components else [components] } } } },
        '#withComponentsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='components', type=d.T.array)]),
        withComponentsMixin(components): { spec+: { application+: { spec+: { components+: if std.isArray(v=components) then components else [components] } } } },
        '#withPolicies':: d.fn(help='"Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed."', args=[d.arg(name='policies', type=d.T.array)]),
        withPolicies(policies): { spec+: { application+: { spec+: { policies: if std.isArray(v=policies) then policies else [policies] } } } },
        '#withPoliciesMixin':: d.fn(help='"Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policies', type=d.T.array)]),
        withPoliciesMixin(policies): { spec+: { application+: { spec+: { policies+: if std.isArray(v=policies) then policies else [policies] } } } },
        '#workflow':: d.obj(help="\"Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark \\\"finish\\\" phase in status.conditions.\""),
        workflow: {
          '#mode':: d.obj(help='"WorkflowExecuteMode defines the mode of workflow execution"'),
          mode: {
            '#withSteps':: d.fn(help='"Steps is the mode of workflow steps execution"', args=[d.arg(name='steps', type=d.T.string)]),
            withSteps(steps): { spec+: { application+: { spec+: { workflow+: { mode+: { steps: steps } } } } } },
            '#withSubSteps':: d.fn(help='"SubSteps is the mode of workflow sub steps execution"', args=[d.arg(name='subSteps', type=d.T.string)]),
            withSubSteps(subSteps): { spec+: { application+: { spec+: { workflow+: { mode+: { subSteps: subSteps } } } } } },
          },
          '#steps':: d.obj(help=''),
          steps: {
            '#inputs':: d.obj(help='"Inputs is the inputs of the step"'),
            inputs: {
              '#withFrom':: d.fn(help='', args=[d.arg(name='from', type=d.T.string)]),
              withFrom(from): { from: from },
              '#withParameterKey':: d.fn(help='', args=[d.arg(name='parameterKey', type=d.T.string)]),
              withParameterKey(parameterKey): { parameterKey: parameterKey },
            },
            '#meta':: d.obj(help='"Meta is the meta data of the workflow step."'),
            meta: {
              '#withAlias':: d.fn(help='', args=[d.arg(name='alias', type=d.T.string)]),
              withAlias(alias): { meta+: { alias: alias } },
            },
            '#outputs':: d.obj(help='"Outputs is the outputs of the step"'),
            outputs: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValueFrom':: d.fn(help='', args=[d.arg(name='valueFrom', type=d.T.string)]),
              withValueFrom(valueFrom): { valueFrom: valueFrom },
            },
            '#subSteps':: d.obj(help=''),
            subSteps: {
              '#inputs':: d.obj(help='"Inputs is the inputs of the step"'),
              inputs: {
                '#withFrom':: d.fn(help='', args=[d.arg(name='from', type=d.T.string)]),
                withFrom(from): { from: from },
                '#withParameterKey':: d.fn(help='', args=[d.arg(name='parameterKey', type=d.T.string)]),
                withParameterKey(parameterKey): { parameterKey: parameterKey },
              },
              '#meta':: d.obj(help='"Meta is the meta data of the workflow step."'),
              meta: {
                '#withAlias':: d.fn(help='', args=[d.arg(name='alias', type=d.T.string)]),
                withAlias(alias): { meta+: { alias: alias } },
              },
              '#outputs':: d.obj(help='"Outputs is the outputs of the step"'),
              outputs: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValueFrom':: d.fn(help='', args=[d.arg(name='valueFrom', type=d.T.string)]),
                withValueFrom(valueFrom): { valueFrom: valueFrom },
              },
              '#withDependsOn':: d.fn(help='"DependsOn is the dependency of the step"', args=[d.arg(name='dependsOn', type=d.T.array)]),
              withDependsOn(dependsOn): { dependsOn: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
              '#withDependsOnMixin':: d.fn(help='"DependsOn is the dependency of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dependsOn', type=d.T.array)]),
              withDependsOnMixin(dependsOn): { dependsOn+: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
              '#withIf':: d.fn(help='"If is the if condition of the step"', args=[d.arg(name='If', type=d.T.string)]),
              withIf(If): { 'if': If },
              '#withInputs':: d.fn(help='"Inputs is the inputs of the step"', args=[d.arg(name='inputs', type=d.T.array)]),
              withInputs(inputs): { inputs: if std.isArray(v=inputs) then inputs else [inputs] },
              '#withInputsMixin':: d.fn(help='"Inputs is the inputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='inputs', type=d.T.array)]),
              withInputsMixin(inputs): { inputs+: if std.isArray(v=inputs) then inputs else [inputs] },
              '#withName':: d.fn(help='"Name is the unique name of the workflow step."', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withOutputs':: d.fn(help='"Outputs is the outputs of the step"', args=[d.arg(name='outputs', type=d.T.array)]),
              withOutputs(outputs): { outputs: if std.isArray(v=outputs) then outputs else [outputs] },
              '#withOutputsMixin':: d.fn(help='"Outputs is the outputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputs', type=d.T.array)]),
              withOutputsMixin(outputs): { outputs+: if std.isArray(v=outputs) then outputs else [outputs] },
              '#withProperties':: d.fn(help='"Properties is the properties of the step"', args=[d.arg(name='properties', type=d.T.object)]),
              withProperties(properties): { properties: properties },
              '#withPropertiesMixin':: d.fn(help='"Properties is the properties of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
              withPropertiesMixin(properties): { properties+: properties },
              '#withTimeout':: d.fn(help='"Timeout is the timeout of the step"', args=[d.arg(name='timeout', type=d.T.string)]),
              withTimeout(timeout): { timeout: timeout },
              '#withType':: d.fn(help='"Type is the type of the workflow step."', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { type: type },
            },
            '#withDependsOn':: d.fn(help='"DependsOn is the dependency of the step"', args=[d.arg(name='dependsOn', type=d.T.array)]),
            withDependsOn(dependsOn): { dependsOn: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
            '#withDependsOnMixin':: d.fn(help='"DependsOn is the dependency of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dependsOn', type=d.T.array)]),
            withDependsOnMixin(dependsOn): { dependsOn+: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
            '#withIf':: d.fn(help='"If is the if condition of the step"', args=[d.arg(name='If', type=d.T.string)]),
            withIf(If): { 'if': If },
            '#withInputs':: d.fn(help='"Inputs is the inputs of the step"', args=[d.arg(name='inputs', type=d.T.array)]),
            withInputs(inputs): { inputs: if std.isArray(v=inputs) then inputs else [inputs] },
            '#withInputsMixin':: d.fn(help='"Inputs is the inputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='inputs', type=d.T.array)]),
            withInputsMixin(inputs): { inputs+: if std.isArray(v=inputs) then inputs else [inputs] },
            '#withName':: d.fn(help='"Name is the unique name of the workflow step."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withOutputs':: d.fn(help='"Outputs is the outputs of the step"', args=[d.arg(name='outputs', type=d.T.array)]),
            withOutputs(outputs): { outputs: if std.isArray(v=outputs) then outputs else [outputs] },
            '#withOutputsMixin':: d.fn(help='"Outputs is the outputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputs', type=d.T.array)]),
            withOutputsMixin(outputs): { outputs+: if std.isArray(v=outputs) then outputs else [outputs] },
            '#withProperties':: d.fn(help='"Properties is the properties of the step"', args=[d.arg(name='properties', type=d.T.object)]),
            withProperties(properties): { properties: properties },
            '#withPropertiesMixin':: d.fn(help='"Properties is the properties of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
            withPropertiesMixin(properties): { properties+: properties },
            '#withSubSteps':: d.fn(help='', args=[d.arg(name='subSteps', type=d.T.array)]),
            withSubSteps(subSteps): { subSteps: if std.isArray(v=subSteps) then subSteps else [subSteps] },
            '#withSubStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subSteps', type=d.T.array)]),
            withSubStepsMixin(subSteps): { subSteps+: if std.isArray(v=subSteps) then subSteps else [subSteps] },
            '#withTimeout':: d.fn(help='"Timeout is the timeout of the step"', args=[d.arg(name='timeout', type=d.T.string)]),
            withTimeout(timeout): { timeout: timeout },
            '#withType':: d.fn(help='"Type is the type of the workflow step."', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
          withRef(ref): { spec+: { application+: { spec+: { workflow+: { ref: ref } } } } },
          '#withSteps':: d.fn(help='', args=[d.arg(name='steps', type=d.T.array)]),
          withSteps(steps): { spec+: { application+: { spec+: { workflow+: { steps: if std.isArray(v=steps) then steps else [steps] } } } } },
          '#withStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
          withStepsMixin(steps): { spec+: { application+: { spec+: { workflow+: { steps+: if std.isArray(v=steps) then steps else [steps] } } } } },
        },
      },
      '#status':: d.obj(help='"AppStatus defines the observed state of Application"'),
      status: {
        '#appliedResources':: d.obj(help='"AppliedResources record the resources that the  workflow step apply."'),
        appliedResources: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { apiVersion: apiVersion },
          '#withCluster':: d.fn(help='', args=[d.arg(name='cluster', type=d.T.string)]),
          withCluster(cluster): { cluster: cluster },
          '#withCreator':: d.fn(help='', args=[d.arg(name='creator', type=d.T.string)]),
          withCreator(creator): { creator: creator },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { fieldPath: fieldPath },
          '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { kind: kind },
          '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { namespace: namespace },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { resourceVersion: resourceVersion },
          '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { uid: uid },
        },
        '#components':: d.obj(help='"Components record the related Components created by Application Controller"'),
        components: {
          '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { apiVersion: apiVersion },
          '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { fieldPath: fieldPath },
          '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { kind: kind },
          '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { namespace: namespace },
          '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
          withResourceVersion(resourceVersion): { resourceVersion: resourceVersion },
          '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
          withUid(uid): { uid: uid },
        },
        '#conditions':: d.obj(help='"Conditions of the resource."'),
        conditions: {
          '#withLastTransitionTime':: d.fn(help='"LastTransitionTime is the last time this condition transitioned from one status to another."', args=[d.arg(name='lastTransitionTime', type=d.T.string)]),
          withLastTransitionTime(lastTransitionTime): { lastTransitionTime: lastTransitionTime },
          '#withMessage':: d.fn(help="\"A Message containing details about this condition's last transition from one status to another, if any.\"", args=[d.arg(name='message', type=d.T.string)]),
          withMessage(message): { message: message },
          '#withReason':: d.fn(help="\"A Reason for this condition's last transition from one status to another.\"", args=[d.arg(name='reason', type=d.T.string)]),
          withReason(reason): { reason: reason },
          '#withStatus':: d.fn(help='"Status of this condition; is it currently True, False, or Unknown?"', args=[d.arg(name='status', type=d.T.string)]),
          withStatus(status): { status: status },
          '#withType':: d.fn(help='"Type of this condition. At most one of each condition type may apply to a resource at any point in time."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#latestRevision':: d.obj(help='"LatestRevision of the application configuration it generates"'),
        latestRevision: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { application+: { status+: { latestRevision+: { name: name } } } } },
          '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.integer)]),
          withRevision(revision): { spec+: { application+: { status+: { latestRevision+: { revision: revision } } } } },
          '#withRevisionHash':: d.fn(help='"RevisionHash record the hash value of the spec of ApplicationRevision object."', args=[d.arg(name='revisionHash', type=d.T.string)]),
          withRevisionHash(revisionHash): { spec+: { application+: { status+: { latestRevision+: { revisionHash: revisionHash } } } } },
        },
        '#policy':: d.obj(help='"PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated."'),
        policy: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withStatus':: d.fn(help='', args=[d.arg(name='status', type=d.T.object)]),
          withStatus(status): { status: status },
          '#withStatusMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='status', type=d.T.object)]),
          withStatusMixin(status): { status+: status },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#services':: d.obj(help='"Services record the status of the application services"'),
        services: {
          '#scopes':: d.obj(help=''),
          scopes: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { apiVersion: apiVersion },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { fieldPath: fieldPath },
            '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { kind: kind },
            '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { namespace: namespace },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { resourceVersion: resourceVersion },
            '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { uid: uid },
          },
          '#traits':: d.obj(help=''),
          traits: {
            '#withHealthy':: d.fn(help='', args=[d.arg(name='healthy', type=d.T.boolean)]),
            withHealthy(healthy): { healthy: healthy },
            '#withMessage':: d.fn(help='', args=[d.arg(name='message', type=d.T.string)]),
            withMessage(message): { message: message },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withCluster':: d.fn(help='', args=[d.arg(name='cluster', type=d.T.string)]),
          withCluster(cluster): { cluster: cluster },
          '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.string)]),
          withEnv(env): { env: env },
          '#withHealthy':: d.fn(help='', args=[d.arg(name='healthy', type=d.T.boolean)]),
          withHealthy(healthy): { healthy: healthy },
          '#withMessage':: d.fn(help='', args=[d.arg(name='message', type=d.T.string)]),
          withMessage(message): { message: message },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { namespace: namespace },
          '#withScopes':: d.fn(help='', args=[d.arg(name='scopes', type=d.T.array)]),
          withScopes(scopes): { scopes: if std.isArray(v=scopes) then scopes else [scopes] },
          '#withScopesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopes', type=d.T.array)]),
          withScopesMixin(scopes): { scopes+: if std.isArray(v=scopes) then scopes else [scopes] },
          '#withTraits':: d.fn(help='', args=[d.arg(name='traits', type=d.T.array)]),
          withTraits(traits): { traits: if std.isArray(v=traits) then traits else [traits] },
          '#withTraitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='traits', type=d.T.array)]),
          withTraitsMixin(traits): { traits+: if std.isArray(v=traits) then traits else [traits] },
          '#workloadDefinition':: d.obj(help='"WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1"'),
          workloadDefinition: {
            '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { workloadDefinition+: { apiVersion: apiVersion } },
            '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { workloadDefinition+: { kind: kind } },
          },
        },
        '#withAppliedResources':: d.fn(help='"AppliedResources record the resources that the  workflow step apply."', args=[d.arg(name='appliedResources', type=d.T.array)]),
        withAppliedResources(appliedResources): { spec+: { application+: { status+: { appliedResources: if std.isArray(v=appliedResources) then appliedResources else [appliedResources] } } } },
        '#withAppliedResourcesMixin':: d.fn(help='"AppliedResources record the resources that the  workflow step apply."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='appliedResources', type=d.T.array)]),
        withAppliedResourcesMixin(appliedResources): { spec+: { application+: { status+: { appliedResources+: if std.isArray(v=appliedResources) then appliedResources else [appliedResources] } } } },
        '#withComponents':: d.fn(help='"Components record the related Components created by Application Controller"', args=[d.arg(name='components', type=d.T.array)]),
        withComponents(components): { spec+: { application+: { status+: { components: if std.isArray(v=components) then components else [components] } } } },
        '#withComponentsMixin':: d.fn(help='"Components record the related Components created by Application Controller"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='components', type=d.T.array)]),
        withComponentsMixin(components): { spec+: { application+: { status+: { components+: if std.isArray(v=components) then components else [components] } } } },
        '#withConditions':: d.fn(help='"Conditions of the resource."', args=[d.arg(name='conditions', type=d.T.array)]),
        withConditions(conditions): { spec+: { application+: { status+: { conditions: if std.isArray(v=conditions) then conditions else [conditions] } } } },
        '#withConditionsMixin':: d.fn(help='"Conditions of the resource."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='conditions', type=d.T.array)]),
        withConditionsMixin(conditions): { spec+: { application+: { status+: { conditions+: if std.isArray(v=conditions) then conditions else [conditions] } } } },
        '#withObservedGeneration':: d.fn(help='"The generation observed by the application controller."', args=[d.arg(name='observedGeneration', type=d.T.integer)]),
        withObservedGeneration(observedGeneration): { spec+: { application+: { status+: { observedGeneration: observedGeneration } } } },
        '#withPolicy':: d.fn(help='"PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated."', args=[d.arg(name='policy', type=d.T.array)]),
        withPolicy(policy): { spec+: { application+: { status+: { policy: if std.isArray(v=policy) then policy else [policy] } } } },
        '#withPolicyMixin':: d.fn(help='"PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policy', type=d.T.array)]),
        withPolicyMixin(policy): { spec+: { application+: { status+: { policy+: if std.isArray(v=policy) then policy else [policy] } } } },
        '#withServices':: d.fn(help='"Services record the status of the application services"', args=[d.arg(name='services', type=d.T.array)]),
        withServices(services): { spec+: { application+: { status+: { services: if std.isArray(v=services) then services else [services] } } } },
        '#withServicesMixin':: d.fn(help='"Services record the status of the application services"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='services', type=d.T.array)]),
        withServicesMixin(services): { spec+: { application+: { status+: { services+: if std.isArray(v=services) then services else [services] } } } },
        '#withStatus':: d.fn(help='"ApplicationPhase is a label for the condition of an application at the current time"', args=[d.arg(name='status', type=d.T.string)]),
        withStatus(status): { spec+: { application+: { status+: { status: status } } } },
        '#workflow':: d.obj(help='"Workflow record the status of workflow"'),
        workflow: {
          '#contextBackend':: d.obj(help="\"ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, \\\"must refer only to types A and B\\\" or \\\"UID not honored\\\" or \\\"name must be restricted\\\". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. \\n Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .\""),
          contextBackend: {
            '#withApiVersion':: d.fn(help='"API version of the referent."', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { spec+: { application+: { status+: { workflow+: { contextBackend+: { apiVersion: apiVersion } } } } } },
            '#withFieldPath':: d.fn(help='"If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \\"spec.containers{name}\\" (where \\"name\\" refers to the name of the container that triggered the event) or if no container name is specified \\"spec.containers[2]\\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future."', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { spec+: { application+: { status+: { workflow+: { contextBackend+: { fieldPath: fieldPath } } } } } },
            '#withKind':: d.fn(help='"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { application+: { status+: { workflow+: { contextBackend+: { kind: kind } } } } } },
            '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { application+: { status+: { workflow+: { contextBackend+: { name: name } } } } } },
            '#withNamespace':: d.fn(help='"Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"', args=[d.arg(name='namespace', type=d.T.string)]),
            withNamespace(namespace): { spec+: { application+: { status+: { workflow+: { contextBackend+: { namespace: namespace } } } } } },
            '#withResourceVersion':: d.fn(help='"Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
            withResourceVersion(resourceVersion): { spec+: { application+: { status+: { workflow+: { contextBackend+: { resourceVersion: resourceVersion } } } } } },
            '#withUid':: d.fn(help='"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"', args=[d.arg(name='uid', type=d.T.string)]),
            withUid(uid): { spec+: { application+: { status+: { workflow+: { contextBackend+: { uid: uid } } } } } },
          },
          '#steps':: d.obj(help=''),
          steps: {
            '#subSteps':: d.obj(help=''),
            subSteps: {
              '#withFirstExecuteTime':: d.fn(help='"FirstExecuteTime is the first time this step execution."', args=[d.arg(name='firstExecuteTime', type=d.T.string)]),
              withFirstExecuteTime(firstExecuteTime): { firstExecuteTime: firstExecuteTime },
              '#withId':: d.fn(help='', args=[d.arg(name='id', type=d.T.string)]),
              withId(id): { id: id },
              '#withLastExecuteTime':: d.fn(help='"LastExecuteTime is the last time this step execution."', args=[d.arg(name='lastExecuteTime', type=d.T.string)]),
              withLastExecuteTime(lastExecuteTime): { lastExecuteTime: lastExecuteTime },
              '#withMessage':: d.fn(help='"A human readable message indicating details about why the workflowStep is in this state."', args=[d.arg(name='message', type=d.T.string)]),
              withMessage(message): { message: message },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withPhase':: d.fn(help='"WorkflowStepPhase describes the phase of a workflow step."', args=[d.arg(name='phase', type=d.T.string)]),
              withPhase(phase): { phase: phase },
              '#withReason':: d.fn(help='"A brief CamelCase message indicating details about why the workflowStep is in this state."', args=[d.arg(name='reason', type=d.T.string)]),
              withReason(reason): { reason: reason },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { type: type },
            },
            '#withFirstExecuteTime':: d.fn(help='"FirstExecuteTime is the first time this step execution."', args=[d.arg(name='firstExecuteTime', type=d.T.string)]),
            withFirstExecuteTime(firstExecuteTime): { firstExecuteTime: firstExecuteTime },
            '#withId':: d.fn(help='', args=[d.arg(name='id', type=d.T.string)]),
            withId(id): { id: id },
            '#withLastExecuteTime':: d.fn(help='"LastExecuteTime is the last time this step execution."', args=[d.arg(name='lastExecuteTime', type=d.T.string)]),
            withLastExecuteTime(lastExecuteTime): { lastExecuteTime: lastExecuteTime },
            '#withMessage':: d.fn(help='"A human readable message indicating details about why the workflowStep is in this state."', args=[d.arg(name='message', type=d.T.string)]),
            withMessage(message): { message: message },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withPhase':: d.fn(help='"WorkflowStepPhase describes the phase of a workflow step."', args=[d.arg(name='phase', type=d.T.string)]),
            withPhase(phase): { phase: phase },
            '#withReason':: d.fn(help='"A brief CamelCase message indicating details about why the workflowStep is in this state."', args=[d.arg(name='reason', type=d.T.string)]),
            withReason(reason): { reason: reason },
            '#withSubSteps':: d.fn(help='', args=[d.arg(name='subSteps', type=d.T.array)]),
            withSubSteps(subSteps): { subSteps: if std.isArray(v=subSteps) then subSteps else [subSteps] },
            '#withSubStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subSteps', type=d.T.array)]),
            withSubStepsMixin(subSteps): { subSteps+: if std.isArray(v=subSteps) then subSteps else [subSteps] },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { type: type },
          },
          '#withAppRevision':: d.fn(help='', args=[d.arg(name='appRevision', type=d.T.string)]),
          withAppRevision(appRevision): { spec+: { application+: { status+: { workflow+: { appRevision: appRevision } } } } },
          '#withEndTime':: d.fn(help='', args=[d.arg(name='endTime', type=d.T.string)]),
          withEndTime(endTime): { spec+: { application+: { status+: { workflow+: { endTime: endTime } } } } },
          '#withFinished':: d.fn(help='', args=[d.arg(name='finished', type=d.T.boolean)]),
          withFinished(finished): { spec+: { application+: { status+: { workflow+: { finished: finished } } } } },
          '#withMessage':: d.fn(help='', args=[d.arg(name='message', type=d.T.string)]),
          withMessage(message): { spec+: { application+: { status+: { workflow+: { message: message } } } } },
          '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.string)]),
          withMode(mode): { spec+: { application+: { status+: { workflow+: { mode: mode } } } } },
          '#withStartTime':: d.fn(help='', args=[d.arg(name='startTime', type=d.T.string)]),
          withStartTime(startTime): { spec+: { application+: { status+: { workflow+: { startTime: startTime } } } } },
          '#withStatus':: d.fn(help='"WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time"', args=[d.arg(name='status', type=d.T.string)]),
          withStatus(status): { spec+: { application+: { status+: { workflow+: { status: status } } } } },
          '#withSteps':: d.fn(help='', args=[d.arg(name='steps', type=d.T.array)]),
          withSteps(steps): { spec+: { application+: { status+: { workflow+: { steps: if std.isArray(v=steps) then steps else [steps] } } } } },
          '#withStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
          withStepsMixin(steps): { spec+: { application+: { status+: { workflow+: { steps+: if std.isArray(v=steps) then steps else [steps] } } } } },
          '#withSuspend':: d.fn(help='', args=[d.arg(name='suspend', type=d.T.boolean)]),
          withSuspend(suspend): { spec+: { application+: { status+: { workflow+: { suspend: suspend } } } } },
          '#withSuspendState':: d.fn(help='', args=[d.arg(name='suspendState', type=d.T.string)]),
          withSuspendState(suspendState): { spec+: { application+: { status+: { workflow+: { suspendState: suspendState } } } } },
          '#withTerminated':: d.fn(help='', args=[d.arg(name='terminated', type=d.T.boolean)]),
          withTerminated(terminated): { spec+: { application+: { status+: { workflow+: { terminated: terminated } } } } },
        },
      },
      '#withApiVersion':: d.fn(help='"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { application+: { apiVersion: apiVersion } } },
      '#withKind':: d.fn(help='"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { application+: { kind: kind } } },
    },
    '#compression':: d.obj(help='"Compression represents the compressed components in apprev in base64 (if compression is enabled)."'),
    compression: {
      '#withData':: d.fn(help='', args=[d.arg(name='data', type=d.T.string)]),
      withData(data): { spec+: { compression+: { data: data } } },
      '#withType':: d.fn(help='"Type the compression type"', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { compression+: { type: type } } },
    },
    '#withComponentDefinitions':: d.fn(help='"ComponentDefinitions records the snapshot of the componentDefinitions related with the created/modified Application"', args=[d.arg(name='componentDefinitions', type=d.T.object)]),
    withComponentDefinitions(componentDefinitions): { spec+: { componentDefinitions: componentDefinitions } },
    '#withComponentDefinitionsMixin':: d.fn(help='"ComponentDefinitions records the snapshot of the componentDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='componentDefinitions', type=d.T.object)]),
    withComponentDefinitionsMixin(componentDefinitions): { spec+: { componentDefinitions+: componentDefinitions } },
    '#withPolicies':: d.fn(help='"Policies records the external policies"', args=[d.arg(name='policies', type=d.T.object)]),
    withPolicies(policies): { spec+: { policies: policies } },
    '#withPoliciesMixin':: d.fn(help='"Policies records the external policies"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policies', type=d.T.object)]),
    withPoliciesMixin(policies): { spec+: { policies+: policies } },
    '#withPolicyDefinitions':: d.fn(help='"PolicyDefinitions records the snapshot of the PolicyDefinitions related with the created/modified Application"', args=[d.arg(name='policyDefinitions', type=d.T.object)]),
    withPolicyDefinitions(policyDefinitions): { spec+: { policyDefinitions: policyDefinitions } },
    '#withPolicyDefinitionsMixin':: d.fn(help='"PolicyDefinitions records the snapshot of the PolicyDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policyDefinitions', type=d.T.object)]),
    withPolicyDefinitionsMixin(policyDefinitions): { spec+: { policyDefinitions+: policyDefinitions } },
    '#withReferredObjects':: d.fn(help='"ReferredObjects records the referred objects used in the ref-object typed components"', args=[d.arg(name='referredObjects', type=d.T.array)]),
    withReferredObjects(referredObjects): { spec+: { referredObjects: if std.isArray(v=referredObjects) then referredObjects else [referredObjects] } },
    '#withReferredObjectsMixin':: d.fn(help='"ReferredObjects records the referred objects used in the ref-object typed components"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='referredObjects', type=d.T.array)]),
    withReferredObjectsMixin(referredObjects): { spec+: { referredObjects+: if std.isArray(v=referredObjects) then referredObjects else [referredObjects] } },
    '#withScopeDefinitions':: d.fn(help='"ScopeDefinitions records the snapshot of the scopeDefinitions related with the created/modified Application"', args=[d.arg(name='scopeDefinitions', type=d.T.object)]),
    withScopeDefinitions(scopeDefinitions): { spec+: { scopeDefinitions: scopeDefinitions } },
    '#withScopeDefinitionsMixin':: d.fn(help='"ScopeDefinitions records the snapshot of the scopeDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopeDefinitions', type=d.T.object)]),
    withScopeDefinitionsMixin(scopeDefinitions): { spec+: { scopeDefinitions+: scopeDefinitions } },
    '#withScopeGVK':: d.fn(help='"ScopeGVK records the apiVersion to GVK mapping"', args=[d.arg(name='scopeGVK', type=d.T.object)]),
    withScopeGVK(scopeGVK): { spec+: { scopeGVK: scopeGVK } },
    '#withScopeGVKMixin':: d.fn(help='"ScopeGVK records the apiVersion to GVK mapping"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='scopeGVK', type=d.T.object)]),
    withScopeGVKMixin(scopeGVK): { spec+: { scopeGVK+: scopeGVK } },
    '#withTraitDefinitions':: d.fn(help='"TraitDefinitions records the snapshot of the traitDefinitions related with the created/modified Application"', args=[d.arg(name='traitDefinitions', type=d.T.object)]),
    withTraitDefinitions(traitDefinitions): { spec+: { traitDefinitions: traitDefinitions } },
    '#withTraitDefinitionsMixin':: d.fn(help='"TraitDefinitions records the snapshot of the traitDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='traitDefinitions', type=d.T.object)]),
    withTraitDefinitionsMixin(traitDefinitions): { spec+: { traitDefinitions+: traitDefinitions } },
    '#withWorkflowStepDefinitions':: d.fn(help='"WorkflowStepDefinitions records the snapshot of the WorkflowStepDefinitions related with the created/modified Application"', args=[d.arg(name='workflowStepDefinitions', type=d.T.object)]),
    withWorkflowStepDefinitions(workflowStepDefinitions): { spec+: { workflowStepDefinitions: workflowStepDefinitions } },
    '#withWorkflowStepDefinitionsMixin':: d.fn(help='"WorkflowStepDefinitions records the snapshot of the WorkflowStepDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='workflowStepDefinitions', type=d.T.object)]),
    withWorkflowStepDefinitionsMixin(workflowStepDefinitions): { spec+: { workflowStepDefinitions+: workflowStepDefinitions } },
    '#withWorkloadDefinitions':: d.fn(help='"WorkloadDefinitions records the snapshot of the workloadDefinitions related with the created/modified Application"', args=[d.arg(name='workloadDefinitions', type=d.T.object)]),
    withWorkloadDefinitions(workloadDefinitions): { spec+: { workloadDefinitions: workloadDefinitions } },
    '#withWorkloadDefinitionsMixin':: d.fn(help='"WorkloadDefinitions records the snapshot of the workloadDefinitions related with the created/modified Application"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='workloadDefinitions', type=d.T.object)]),
    withWorkloadDefinitionsMixin(workloadDefinitions): { spec+: { workloadDefinitions+: workloadDefinitions } },
    '#workflow':: d.obj(help='"Workflow records the external workflow"'),
    workflow: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { workflow+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { workflow+: { metadata+: { annotations+: annotations } } } },
        '#withFinalizers':: d.fn(help='', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizers(finalizers): { spec+: { workflow+: { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withFinalizersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
        withFinalizersMixin(finalizers): { spec+: { workflow+: { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } } } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { workflow+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { workflow+: { metadata+: { labels+: labels } } } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { workflow+: { metadata+: { name: name } } } },
        '#withNamespace':: d.fn(help='', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { workflow+: { metadata+: { namespace: namespace } } } },
      },
      '#mode':: d.obj(help='"WorkflowExecuteMode defines the mode of workflow execution"'),
      mode: {
        '#withSteps':: d.fn(help='"Steps is the mode of workflow steps execution"', args=[d.arg(name='steps', type=d.T.string)]),
        withSteps(steps): { spec+: { workflow+: { mode+: { steps: steps } } } },
        '#withSubSteps':: d.fn(help='"SubSteps is the mode of workflow sub steps execution"', args=[d.arg(name='subSteps', type=d.T.string)]),
        withSubSteps(subSteps): { spec+: { workflow+: { mode+: { subSteps: subSteps } } } },
      },
      '#steps':: d.obj(help=''),
      steps: {
        '#inputs':: d.obj(help='"Inputs is the inputs of the step"'),
        inputs: {
          '#withFrom':: d.fn(help='', args=[d.arg(name='from', type=d.T.string)]),
          withFrom(from): { from: from },
          '#withParameterKey':: d.fn(help='', args=[d.arg(name='parameterKey', type=d.T.string)]),
          withParameterKey(parameterKey): { parameterKey: parameterKey },
        },
        '#meta':: d.obj(help='"Meta is the meta data of the workflow step."'),
        meta: {
          '#withAlias':: d.fn(help='', args=[d.arg(name='alias', type=d.T.string)]),
          withAlias(alias): { meta+: { alias: alias } },
        },
        '#outputs':: d.obj(help='"Outputs is the outputs of the step"'),
        outputs: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValueFrom':: d.fn(help='', args=[d.arg(name='valueFrom', type=d.T.string)]),
          withValueFrom(valueFrom): { valueFrom: valueFrom },
        },
        '#subSteps':: d.obj(help=''),
        subSteps: {
          '#inputs':: d.obj(help='"Inputs is the inputs of the step"'),
          inputs: {
            '#withFrom':: d.fn(help='', args=[d.arg(name='from', type=d.T.string)]),
            withFrom(from): { from: from },
            '#withParameterKey':: d.fn(help='', args=[d.arg(name='parameterKey', type=d.T.string)]),
            withParameterKey(parameterKey): { parameterKey: parameterKey },
          },
          '#meta':: d.obj(help='"Meta is the meta data of the workflow step."'),
          meta: {
            '#withAlias':: d.fn(help='', args=[d.arg(name='alias', type=d.T.string)]),
            withAlias(alias): { meta+: { alias: alias } },
          },
          '#outputs':: d.obj(help='"Outputs is the outputs of the step"'),
          outputs: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValueFrom':: d.fn(help='', args=[d.arg(name='valueFrom', type=d.T.string)]),
            withValueFrom(valueFrom): { valueFrom: valueFrom },
          },
          '#withDependsOn':: d.fn(help='"DependsOn is the dependency of the step"', args=[d.arg(name='dependsOn', type=d.T.array)]),
          withDependsOn(dependsOn): { dependsOn: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
          '#withDependsOnMixin':: d.fn(help='"DependsOn is the dependency of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dependsOn', type=d.T.array)]),
          withDependsOnMixin(dependsOn): { dependsOn+: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
          '#withIf':: d.fn(help='"If is the if condition of the step"', args=[d.arg(name='If', type=d.T.string)]),
          withIf(If): { 'if': If },
          '#withInputs':: d.fn(help='"Inputs is the inputs of the step"', args=[d.arg(name='inputs', type=d.T.array)]),
          withInputs(inputs): { inputs: if std.isArray(v=inputs) then inputs else [inputs] },
          '#withInputsMixin':: d.fn(help='"Inputs is the inputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='inputs', type=d.T.array)]),
          withInputsMixin(inputs): { inputs+: if std.isArray(v=inputs) then inputs else [inputs] },
          '#withName':: d.fn(help='"Name is the unique name of the workflow step."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withOutputs':: d.fn(help='"Outputs is the outputs of the step"', args=[d.arg(name='outputs', type=d.T.array)]),
          withOutputs(outputs): { outputs: if std.isArray(v=outputs) then outputs else [outputs] },
          '#withOutputsMixin':: d.fn(help='"Outputs is the outputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputs', type=d.T.array)]),
          withOutputsMixin(outputs): { outputs+: if std.isArray(v=outputs) then outputs else [outputs] },
          '#withProperties':: d.fn(help='"Properties is the properties of the step"', args=[d.arg(name='properties', type=d.T.object)]),
          withProperties(properties): { properties: properties },
          '#withPropertiesMixin':: d.fn(help='"Properties is the properties of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
          withPropertiesMixin(properties): { properties+: properties },
          '#withTimeout':: d.fn(help='"Timeout is the timeout of the step"', args=[d.arg(name='timeout', type=d.T.string)]),
          withTimeout(timeout): { timeout: timeout },
          '#withType':: d.fn(help='"Type is the type of the workflow step."', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#withDependsOn':: d.fn(help='"DependsOn is the dependency of the step"', args=[d.arg(name='dependsOn', type=d.T.array)]),
        withDependsOn(dependsOn): { dependsOn: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
        '#withDependsOnMixin':: d.fn(help='"DependsOn is the dependency of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dependsOn', type=d.T.array)]),
        withDependsOnMixin(dependsOn): { dependsOn+: if std.isArray(v=dependsOn) then dependsOn else [dependsOn] },
        '#withIf':: d.fn(help='"If is the if condition of the step"', args=[d.arg(name='If', type=d.T.string)]),
        withIf(If): { 'if': If },
        '#withInputs':: d.fn(help='"Inputs is the inputs of the step"', args=[d.arg(name='inputs', type=d.T.array)]),
        withInputs(inputs): { inputs: if std.isArray(v=inputs) then inputs else [inputs] },
        '#withInputsMixin':: d.fn(help='"Inputs is the inputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='inputs', type=d.T.array)]),
        withInputsMixin(inputs): { inputs+: if std.isArray(v=inputs) then inputs else [inputs] },
        '#withName':: d.fn(help='"Name is the unique name of the workflow step."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withOutputs':: d.fn(help='"Outputs is the outputs of the step"', args=[d.arg(name='outputs', type=d.T.array)]),
        withOutputs(outputs): { outputs: if std.isArray(v=outputs) then outputs else [outputs] },
        '#withOutputsMixin':: d.fn(help='"Outputs is the outputs of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputs', type=d.T.array)]),
        withOutputsMixin(outputs): { outputs+: if std.isArray(v=outputs) then outputs else [outputs] },
        '#withProperties':: d.fn(help='"Properties is the properties of the step"', args=[d.arg(name='properties', type=d.T.object)]),
        withProperties(properties): { properties: properties },
        '#withPropertiesMixin':: d.fn(help='"Properties is the properties of the step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='properties', type=d.T.object)]),
        withPropertiesMixin(properties): { properties+: properties },
        '#withSubSteps':: d.fn(help='', args=[d.arg(name='subSteps', type=d.T.array)]),
        withSubSteps(subSteps): { subSteps: if std.isArray(v=subSteps) then subSteps else [subSteps] },
        '#withSubStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subSteps', type=d.T.array)]),
        withSubStepsMixin(subSteps): { subSteps+: if std.isArray(v=subSteps) then subSteps else [subSteps] },
        '#withTimeout':: d.fn(help='"Timeout is the timeout of the step"', args=[d.arg(name='timeout', type=d.T.string)]),
        withTimeout(timeout): { timeout: timeout },
        '#withType':: d.fn(help='"Type is the type of the workflow step."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { type: type },
      },
      '#withApiVersion':: d.fn(help='"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { spec+: { workflow+: { apiVersion: apiVersion } } },
      '#withKind':: d.fn(help='"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { spec+: { workflow+: { kind: kind } } },
      '#withSteps':: d.fn(help='', args=[d.arg(name='steps', type=d.T.array)]),
      withSteps(steps): { spec+: { workflow+: { steps: if std.isArray(v=steps) then steps else [steps] } } },
      '#withStepsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
      withStepsMixin(steps): { spec+: { workflow+: { steps+: if std.isArray(v=steps) then steps else [steps] } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
